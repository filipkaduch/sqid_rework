@import "functions";
@import "variables";
@import "~bootstrap/scss/mixins/buttons";

.btn {
	margin: 0.25rem;
	&:focus:not(.btn-elevate) {
		box-shadow: none !important;
	}
}

// Button states
@each $name, $color in $ts-theme-colors {
	.btn-#{$name} {
		@if (opacity(get-value($color, 'background')) == 1) {
			@include button-variant(get-value($color, 'background'), get-value($color, 'background'));
		} @else {
			@include button-variant(
					get-value($color, 'background'),
					get-value($color, 'background'),
					adjust-color(get-value($color, 'background'), $alpha: 0.2),
					adjust-color(get-value($color, 'background'), $alpha: 0.2),
					adjust-color(get-value($color, 'background'), $alpha: 0.3),
					adjust-color(get-value($color, 'background'), $alpha: 0.3)
			);
		}
		color: get-value($color, 'text');
		border: none;

		&:hover:not(:disabled):not(.disabled),
		&:focus:not(:disabled):not(.disabled),
		&:active:not(:disabled):not(.disabled),
		&.active:not(:disabled):not(.disabled) {
			color: get-value($color, 'text') !important;
		}

		& + .btn.dropdown-toggle {
			position: relative;

			&:before {
				display: block;
				content: ' ';
				border-left: 1px solid get-value($color, 'text');
				position: absolute;
				top: 3px;
				left: -1px;
				bottom: 3px;
				opacity: 0.3;
			}

			&:hover,
			&:focus,
			&.active {
				&:before {
					display: none;
				}
			}
		}
	}

	.btn-#{$name}-inverse {
		@if (opacity(get-value($color, 'text')) == 1) {
			@include button-variant(get-value($color, 'text'), get-value($color, 'text'));
		} @else {
			@include button-variant(
					get-value($color, 'text'),
					get-value($color, 'text'),
					adjust-color(get-value($color, 'text'), $alpha: 0.2),
					adjust-color(get-value($color, 'text'), $alpha: 0.2),
					adjust-color(get-value($color, 'text'), $alpha: 0.3),
					adjust-color(get-value($color, 'text'), $alpha: 0.3)
			);
		}
		color: get-value($color, 'background');
		border: none;

		&:hover:not(:disabled):not(.disabled),
		&:focus:not(:disabled):not(.disabled),
		&:active:not(:disabled):not(.disabled),
		&.active:not(:disabled):not(.disabled) {
			color: get-value($color, 'background') !important;
		}

		& + .btn.dropdown-toggle {
			position: relative;

			&:before {
				display: block;
				content: ' ';
				border-left: 1px solid get-value($color, 'background');
				position: absolute;
				top: 3px;
				left: -1px;
				bottom: 3px;
				opacity: 0.3;
			}

			&:hover,
			&:focus,
			&.active {
				&:before {
					display: none;
				}
			}
		}
	}
}

// Buttons with icon
.btn {
	[class^="fa-"],
	[class*=" fa-"] {
		font-size: 1.2rem;
		margin-right: 0.25rem;
		vertical-align: -0.25rem;
	}

	&.btn-sm {
		[class^="fa-"],
		[class*=" fa-"] {
			font-size: 1rem;
			margin-right: 0.35rem;
		}
	}

	&.btn-lg {
		[class^="fa-"],
		[class*=" fa-"] {
			font-size: 1.4rem;
			margin-right: 0.75rem;
		}
	}
}

.btn.btn-white,
.btn.btn-action {
	height: 36px;
}

.btn.btn-white-collapse:focus, .btn.btn-white-collapse:hover {
	background-color: #F3F6F7;
	font-weight: bold;
}

.btn.btn-white:not(:disabled):hover {
	background-color: #F3F6F7;
}

.btn.btn-outline-chartOption {
	border-color: #CFD8DD;
	height: 36px;
	padding-top: 8px;
	padding-bottom: 8px;
	margin: 0;
}

.btn-outline-chartOption.active {
	border-color: #AAABAE !important;
}

.btn-outline-chartOption.disabled {
	background-color: #FFFFFF;
	color: #2D3038
}

@include media-breakpoint-down(xl) {
	.btn.btn-action {
		height: auto;
	}
}

.btn.btn-white {
	border: 1px solid #CFD8DD;
}

.btn-hover:not(:disabled) {
	padding: 8px 10px;
	border-radius: 50%;
}

// Button with icon only
.btn.btn-icon {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	padding: 0;
	height: 36px;

	&.rounded-pill {
		border-radius: 50% !important;
	}

	[class^="fa-"],
	[class*=" fa-"] {
		padding: 0;
		margin: 0;
		line-height: 0;
	}

	&.empty:hover {
		background-color: #E1E7EA;
		border-radius: 50%;
	}

	& {
		height: 3rem;
		width: 3rem;
	}

	&.btn-sm {
		height: 2.5rem;
		width: 2.5rem;
	}

	&.btn-lg {
		height: 4rem;
		width: 4rem;
	}

	// Icon sizing
	&.btn-icon-sm {
		[class^="fa-"],
		[class*=" fa-"] {
			font-size: 1.15rem;
			height: 36px;
		}
	}

	// Icon sizing
	&.btn-icon-md {
		[class^="fa-"],
		[class*=" fa-"] {
			font-size: 1.2rem;
		}
	}

	&.btn-icon-lg {
		[class^="fa-"],
		[class*=" fa-"] {
			font-size: 1.4rem;
		}
	}

	// Icon button states
	@each $name, $color in $ts-theme-colors {
		&.btn-#{$name} {
			[class^="fa-"],
			[class*=" fa-"] {
				color: get-value($color, 'text');
			}
		}

		&.btn-#{$name}-inverse {
			[class^="fa-"],
			[class*=" fa-"] {
				color: get-value($color, 'background');
			}
		}
	}
}

//section filter button
.btn-group > .btn {
	margin-left: 0;
	margin-right: 0;
}

.btn-filter-reset {
	z-index: 1;
	position: absolute;
	right: 0.5rem;
	top: 0.5rem;
}

.btn-hover:not(:disabled) {
	padding: 8px 10px;
	border-radius: 50%;
}

.btn-hover:not(:disabled):hover {
	border-radius: 50%;
	background: map-get($ds-colors, 'display-content-100')!important;
}
