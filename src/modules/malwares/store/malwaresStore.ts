import {defineStore} from 'pinia';
import {getMalwareProperties, getMalwarePropertiesApache} from "@/api/malwares/sparql";
import {malwarePropertyTypes, mapMalwareData, parseProperties} from "@/api/malwares/malwares";
import cloneDeep from "lodash/cloneDeep";
import {nextTick} from "vue";


export interface MalwaresState {
    malwares: {
        [malwareId: string]: Malware;
    };
}

interface SubtechniqueInfo {
    subtechniqueOf: string
    mainTechniqueName: string
}

export interface MappedInfo {
    name: string
    id?: string
    source?: string
    description?: string
}

export interface Malware {
    id: string
    loading: boolean
    claims: MalwareClaim[] | null
    terms: any
    datatypes: string[]
    [malwarePropertyTypes.HAS_DESCRIPTION]?: string
    [malwarePropertyTypes.HAS_DETECTION]?: string
    [malwarePropertyTypes.HAS_DATA_SOURCES]?: string[]
    [malwarePropertyTypes.HAS_VERSION]?: string
    [malwarePropertyTypes.HAS_CONTRIBUTORS]?: string[]
    [malwarePropertyTypes.IS_SUBTECHNIQUE]?: boolean
    [malwarePropertyTypes.IS_SUBTECHNIQUE_OF]?: SubtechniqueInfo
    [malwarePropertyTypes.WAS_LAST_MODIFIED]?: string
    [malwarePropertyTypes.WAS_CREATED]?: string
    [malwarePropertyTypes.HAS_URL]?: string
    [malwarePropertyTypes.HAS_NAME]?: string
    [malwarePropertyTypes.TYPE]?: string | string[]
    [malwarePropertyTypes.HAS_PLATFORMS]?: string[]
    [malwarePropertyTypes.DATA_TYPE_PROPERTY]?: string
    [malwarePropertyTypes.HAS_SYSTEM_REQUIREMENTS]?: string
    [malwarePropertyTypes.HAS_RELATIONSHIP_CITATIONS]?: string | MappedInfo[]
    [malwarePropertyTypes.FUNCTIONAL_PROPERTY]?: string
    [malwarePropertyTypes.HAS_ALIASES]?: string | string[]
    [malwarePropertyTypes.HAS_DEFENSES_BY_PASSED]?: MappedInfo[]
    [malwarePropertyTypes.USES_SOFTWARE]?: MappedInfo[]
    [malwarePropertyTypes.USES_TECHNIQUE]?: MappedInfo[]
    [malwarePropertyTypes.MITIGATES]?: MappedInfo[]
    [malwarePropertyTypes.HAS_SUBTECHNIQUE]?: MappedInfo[],
    [malwarePropertyTypes.HAS_MITIGATORS]?: MappedInfo[]
    [malwarePropertyTypes.USED_IN_TACTIC]?: MappedInfo[]
    [malwarePropertyTypes.HAS_ASSOCIATED_GROUPS]?: MappedInfo[]
    [malwarePropertyTypes.HAS_ASSOCIATED_GROUPS_CITATIONS]?: MappedInfo[]
    [key: string]: any
}

export interface MalwareClaim {
    object: string
    property: string
    value: string
}

export const defaultMalware: Malware = {
    id: '',
    claims: null,
    terms: null,
    loading: false,
    datatypes: [],
    [malwarePropertyTypes.HAS_RELATIONSHIP_CITATIONS]: [],
    [malwarePropertyTypes.USES_TECHNIQUE]: [],
    [malwarePropertyTypes.USES_SOFTWARE]: [],
    [malwarePropertyTypes.MITIGATES]: [],
    [malwarePropertyTypes.HAS_SUBTECHNIQUE]: [],
    [malwarePropertyTypes.HAS_MITIGATORS]: [],
    [malwarePropertyTypes.USED_IN_TACTIC]: [],
    [malwarePropertyTypes.HAS_DEFENSES_BY_PASSED]: []
};

export const useMalwaresStore = defineStore('malwaresStore', {
    state: (): MalwaresState => ({
        malwares: {}
    }),
    getters: {
        getAllMalwares: (state) => state.malwares
    },
    actions: {
        async updateMalwareData(malwareId: string, local: boolean = false) {
            let properties;
            if (local) {
                properties = await getMalwareProperties(malwareId);
            } else {
                properties = await getMalwarePropertiesApache(malwareId);
            }
            console.log(properties);
            const parsedData = parseProperties(properties, local);
            console.log(parsedData);
            this.malwares[malwareId].claims = cloneDeep(parsedData);
            this.malwares[malwareId].id = malwareId;
            this.malwares[malwareId] = await mapMalwareData(this.malwares[malwareId], parsedData);
        }
    }
});
