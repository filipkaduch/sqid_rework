import {defineStore} from 'pinia';
import {EntityId} from "@/api/wikidata/types";
import {getMalwareProperties, getMalwarePropertyDefinition, searchForPropertyValue} from "@/api/malwares/sparql";
import {extractId, malwarePropertyEndpointsMap, parseProperties} from "@/api/malwares/malwares";
import cloneDeep from "lodash/cloneDeep";


export interface MalwaresPropertyState {
    malwares: {
        [malwareId: string]: MalwareProperty;
    };
}

export interface MalwareProperty {
    name: string
    properties: string[] | null,
    type: string | null
    loading: boolean
}

export const defaultMalwareProperty: MalwareProperty = {
    name: '',
    properties: [],
    type: null,
    loading: false
};

export const useMalwarePropertiesStore = defineStore('malwarePropertiesStore', {
    state: (): MalwaresPropertyState => ({
        malwares: {}
    }),
    getters: {
        getAllMalwares: (state) => state.malwares
    },
    actions: {
        async loadPropertyData(propertyName: string, malwareId: string) {
            console.log(propertyName);
            this.malwares[malwareId] = cloneDeep(defaultMalwareProperty);
            const response = await getMalwarePropertyDefinition(propertyName);
            // @ts-ignore
            this.malwares[malwareId].properties = response.map((prop) => extractId(prop.definition));
            // @ts-ignore
            for (const malwareProp of this.malwares[malwareId].properties) {
                const propValue = await searchForPropertyValue(malwareProp, malwarePropertyEndpointsMap(malwareProp), malwareId);
                console.log(propValue);
            }
        }
    }
});
