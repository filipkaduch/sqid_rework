import {EntityId, SparqlBinding, SparqlResult} from "@/api/wikidata/types";
import {sparqlRequest} from "@/api/wikidata";
import {feiOntologyEndpoint, localSparqlEndpoint, rdfSchemaSyntax} from "@/api/endpoints";
import {MalwareResult} from "@/api/malwares/types";
import {malwareSparqlRequest} from "@/api/malwares/index";
import {entityValue, sparqlQuery} from "@/api/wikidata/sparql";
import {malwarePropertyEndpointsMap, omitTypes} from "@/api/malwares/malwares";

export const getTechniquesRelationsQuery = async(): Promise<SparqlBinding[]> => {
  const response = await sparqlRequest(localSparqlEndpoint,
      'SELECT ?s ?p ?o WHERE { ?s ?p ?o}');
  return response.results.bindings;
};

export const searchForPropertyValue = async(property: string, endpoint: string, malwareId: string) => {
  if (!omitTypes.includes(property)) {
    const response = await sparqlRequest(localSparqlEndpoint, `
  SELECT ?property ?value
      WHERE {
    <${endpoint}${malwareId}> ?property ?value.
    FILTER (regex(?property, "${property}", "i"))
  }`);
    return response;
  }
  return;
};

export const getName = async(malwareId: string, local: boolean = false): Promise<string> => {
  const response = await sparqlRequest(localSparqlEndpoint, `
    SELECT ?name
    WHERE {
      <${feiOntologyEndpoint}${malwareId}> <${feiOntologyEndpoint}hasName> ?name .
    }
  `);
  if (local) {
    // @ts-ignore
    if (response[0]) {
      // @ts-ignore
      return response[0].name;
    }
  } else {
    // @ts-ignore
    if (response.results.bindings[0]) {
      console.log(response)
      // @ts-ignore
      return response.results.bindings[0].entries.name.value;
    }
  }
  return '';
};

export const getSubtechniques = async(techniqueId: string) => {
  const response = await sparqlRequest(localSparqlEndpoint, `
    SELECT ?entity WHERE {
      ?entity <${feiOntologyEndpoint}hasId> ?id .
      FILTER regex(?id, "^${techniqueId}.")
    }
  `);
  return response.results.bindings;
};

export const getRelations = async(techniqueId: string, property: string, map: boolean = true) => {
  const response = await sparqlRequest(localSparqlEndpoint, `
    SELECT ?entity WHERE {
      ?entity <${feiOntologyEndpoint}${property}> ?id .
      FILTER regex(str(?id), "${techniqueId}")
    }
  `);
  if (map) {
    return response.results.bindings.map((bind) => ({...bind.entries}))
  }
  return response.results.bindings;
};

/*

  const response = await sparqlRequest(localSparqlEndpoint,`
        SELECT DISTINCT ?entity ?property ?value
    WHERE {
      ?entity ?property ?value .
        FILTER (regex(?value, "${search}", "i") && !regex(?value, "^http://")) .
      FILTER (?property = <${feiOntologyEndpoint}hasName> ||
              ?property = <${rdfSchemaSyntax}hasDescription> ||
              ?property = <${feiOntologyEndpoint}hasAliases>)
      ?entity ?property ?filterValue .
    } LIMIT 1`);
  if (map) {
    return response.results.bindings.map((bind) => ({...bind.entries}))
  }
  return response;

 */

/*
    SELECT ?entity ?value
    WHERE {
      ?entity <${feiOntologyEndpoint}hasName> ?value .
        FILTER (regex(str(?value), "${search}", "i"))
      }
    LIMIT 1`);
 */

export const searchForEntities = async(search: string, map: boolean = true) => {
  /* const response = await sparqlRequest(localSparqlEndpoint,`
    SELECT DISTINCT ?entity ?value
    WHERE {
      ?entity <${feiOntologyEndpoint}hasName> ?value .
      FILTER(regex(str(?value), "${search}", "i"))
       ?entity ?property ?filterValue .
    } LIMIT 3`);
  if (map) {
    return response.results.bindings.map((bind) => ({...bind.entries}))
  }
  return response; */
  const response = await sparqlRequest(localSparqlEndpoint,` 
  SELECT DISTINCT ?entity ?property ?value
      WHERE {
      ?entity ?property ?value .
      FILTER (regex(?value, "${search}", "i")) .
      FILTER (?property = <${feiOntologyEndpoint}hasName> ||
          ?property = <${rdfSchemaSyntax}hasDescription> ||
              ?property = <${feiOntologyEndpoint}hasAliases>)
          ?entity ?property ?filterValue .
    } LIMIT 3`);
  if (map) {
    return response.results.bindings.map((bind) => ({...bind.entries}))
  }
  return response;
};

export const getMalwareProperties = async(malwareId: string) => {
  const response = await sparqlRequest(localSparqlEndpoint,`
          SELECT ?property ?value WHERE {
    <${feiOntologyEndpoint}${malwareId}> ?property ?value.
  }`);
  return response;
};

export const getMalwarePropertiesApache = async(malwareId: string, map: boolean = true) => {
  const response = await sparqlRequest(localSparqlEndpoint,`
          SELECT ?property ?value WHERE {
    <${feiOntologyEndpoint}${malwareId}> ?property ?value.
  }`);
  if (map) {
    console.log(response.results.bindings);
    return response.results.bindings.map((bind) => ({...bind.entries}))
  }
  return response.results.bindings;
};

export const getMalwarePropertyDefinition = async(property: string) => {
  const response = await(sparqlRequest(localSparqlEndpoint, `
  SELECT ?definition WHERE {
    <${malwarePropertyEndpointsMap(property)}${property}> ?value ?definition .
  }`));
  return response;
};

export const getById = async(): Promise<MalwareResult> => {
  const response = await malwareSparqlRequest(localSparqlEndpoint, `SELECT ?s ?p ?o WHERE {?s ?p <http://www.w3.org/2002/07/owl#FunctionalProperty>. ?s ?p ?o} LIMIT 100`);
  return response;
}

export async function getPropertySubjects(propertyId: EntityId, lang: string, limit: number, entityId?: EntityId) {
  const result = await sparqlQuery(propertySubjectsQueryMalware(propertyId, lang, entityId, limit));

  return result.map((binding) => {
    return { entityId: entityValue(binding.p),
      label: binding.pLabel.value,
    }
  })
}

function propertySubjectsQueryMalware(propertyId: EntityId,
                               object?: EntityId,
                               limit?: number,
                               resultVariable = 'p'): string {
  const obj = (object
      ? `${object}`
      : '[]')
  const limitClause = limit ? ` LIMIT ${limit} ` : ''

  return `SELECT ?${resultVariable} WHERE {{
  SELECT DISTINCT ?${resultVariable} WHERE {
    ?${resultVariable} ${propertyId} ${obj} .
  }${limitClause}}}`
}
